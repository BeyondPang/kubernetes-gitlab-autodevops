# This file is a template, and might need editing before it works on your project.

image: reg.domain.com/pub/k8s-alpine:v1.0.0

variables:
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  AUTO_DEVOPS_DOMAIN: "domain.com"
  KUBERNETES_VERSION: "1.12.1"
  DEV_NAMESPACE: "default"  # 各环境namespace
  UAT_NAMESPACE: "uat"
  PROD_NAMESPACE: "prod"
  HELM_VERSION: "2.11.0"
  HELM_REPO: "https://reg.domain.com/chartrepo/pub"
  HELM_REPO_NAME: "mycharts"
  HELM_HOST: "tiller-deploy.kube-system:44134"
  CHART_NAME: "mod-chart"  # chart模板名
  CONTAINER_REPO: "reg.domain.com"
  CONTAINER_IMAGE: "reg.domain.com/pub/$CI_PROJECT_NAME"
  CONTAINER_TAG: ${CI_COMMIT_REF_NAME}
  DOCKER_HOST: "http://192.168.105.71:2375"
  DOCKER_USER: "docker"
  DOCKER_PASSWD: "HarborPasswd"
  DOCKER_DRIVER: "overlay2"
  SONAR_URL: "https://sonar.domain.com"
  SONAR_TOKEN: "44643949ff3c21b78af73c85b8165ca587"
  MAVEN_HOST: https://nexus.domain.com
  GROUP_ID: "com.domain.$CI_PROJECT_NAME"
  ARTIFACTID: "$CI_PROJECT_NAME"
  PROJECT_VERSION: "${CI_COMMIT_REF_NAME}"
  UAT_ENABLED: "true"  # 添加注释,不部署uat环境

  # manual, for manual deployment jobs.
  # timed, for automatic rollout deployments with a 5 minute delay each one.
  INCREMENTAL_ROLLOUT_MODE: "manual"  # 增量更新方式，manual或timed
  INCREMENTAL_ROLLOUT_ENABLED: "true"  # 添加注释,无增量更新

  # POD个数
  # REPLICAS: "1"  # 默认为1
  UAT_REPLICAS: "2"
  PRODUCTION_REPLICAS: "10"


stages:  # 整个ci/cd的job
  - build  # 打包，上传docker image
  - test  # 测试docker image
  - review  # 审核
  - zaproxy  # 漏洞扫描
  - staging  # dev环境
  - uat  # UAT环境
  - production  # 生产环境
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - cleanup

build:  # 名为build的job
  stage: build  # 属于名为build的stage
  image: reg.domain.com/library/maven:3.6.0-jdk-8-alpine  # 运行pod时使用的docker image
  script:  # 脚本按顺序运行
    - setup_docker
    - build
  only:  # 此job执行条件
    - branches  # 只有分支

test:
  stage: test
  image: ${CONTAINER_IMAGE}:${CI_COMMIT_REF_NAME}
  script:
    - /bin/sh -c 'sleep 15'  # 能运行15秒，认为他是正常，只作为示例
  only:
    - branches
  except:  # 除了以下条件
    variables:  # 变量设置
      - $TEST_DISABLED  # 变量设置了，即不为空

zaproxy: 
  stage: zaproxy
  allow_failure: true  # 可允许失败，即此job失败，不会导致整个CI/CD失败
  image: reg.domain.com/pub/zap2docker-weekly:latest  
  script:
    - zaproxy
  artifacts:  # 此job产物，可以Gitlab pipeline处下载
    paths: [report.html]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
    variables:
      - $ZAPROXY_DISABLED    

review:
  stage: review
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $DEV_NAMESPACE
    - initialize_tiller
    - create_secret
    - deploy $DEV_NAMESPACE review
    - persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://default-mytest-review-${CHART_NAME}.$DEV_NAMESPACE:8080
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
    variables:
      - $REVIEW_DISABLED

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none  # 定义变量，如果上面已定义，此处覆盖上面定义的
  script:
    - install_dependencies
    - initialize_tiller
    - delete $DEV_NAMESPACE review
  environment:  # 环境
    name: review/$CI_COMMIT_REF_NAME  # 支持多个子环境
    action: stop  # 支持stop动作停止
  when: manual  # 手动触发
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active  # kubernetes为可用状态时
  except:
    refs:
      - master
    variables:
      - $REVIEW_DISABLED

# Staging deploys are disabled by default since
# continuous deployment to production is enabled by default
# If you prefer to automatically deploy to staging and
# only manually promote to production, enable this job by setting
# STAGING_ENABLED.

staging:
  stage: staging
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $DEV_NAMESPACE
    - initialize_tiller
    - create_secret
    - deploy $DEV_NAMESPACE
  environment:
    name: staging
    url: http://${DEV_NAMESPACE}-${CI_PROJECT_NAME}-${CHART_NAME}.$DEV_NAMESPACE:8080  # 环境url定义
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $STAGING_ENABLED

# Canaries are also disabled by default, but if you want them,
# and know what the downsides are, you can enable this by setting
# CANARY_ENABLED.

uat:
  stage: uat
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $UAT_NAMESPACE
    - initialize_tiller
    - create_secret
    - deploy $UAT_NAMESPACE
  environment:
    name: uat
    url: http://http://$UAT_NAMESPACE-${CI_PROJECT_NAME}-${CHART_NAME}.${UAT_NAMESPACE}:8080
  when: manual
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $UAT_ENABLED

.production: &production_template  # 隐藏然后定义一个anchor，名为'production_template'
  stage: production
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $PROD_NAMESPACE
    - initialize_tiller
    - create_secret
    - deploy $PROD_NAMESPACE
    - delete $PROD_NAMESPACE rollout
    - persist_environment_url
  environment:
    name: production
    url: http://$PROD_NAMESPACE-${CI_PROJECT_NAME}-${CHART_NAME}.${PROD_NAMESPACE}:8080
  artifacts:
    paths: [environment_url.txt]

production:
  <<: *production_template  # 合并以下内容到别名production_template中
  only:
    refs:
      - master
    kubernetes: active
  except:
    variables:
      - $STAGING_ENABLED
      - $CANARY_ENABLED
      - $INCREMENTAL_ROLLOUT_ENABLED
      - $INCREMENTAL_ROLLOUT_MODE

production_manual:
  <<: *production_template
  when: manual
  allow_failure: false
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $STAGING_ENABLED
      - $CANARY_ENABLED
  except:
    variables:
      - $INCREMENTAL_ROLLOUT_ENABLED
      - $INCREMENTAL_ROLLOUT_MODE

# This job implements incremental rollout on for every push to `master`.

.rollout: &rollout_template
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $PROD_NAMESPACE
    - initialize_tiller
    - create_secret
    - deploy $PROD_NAMESPACE rollout $ROLLOUT_PERCENTAGE
    - scale $PROD_NAMESPACE stable $((100-ROLLOUT_PERCENTAGE))
    - persist_environment_url
  environment:
    name: production
    url: http://$PROD_NAMESPACE-${CI_PROJECT_NAME}-rollout-${CHART_NAME}.${PROD_NAMESPACE}:8080
  artifacts:
    paths: [environment_url.txt]

.manual_rollout_template: &manual_rollout_template
  <<: *rollout_template
  stage: production
  when: manual
  # This selectors are backward compatible mode with $INCREMENTAL_ROLLOUT_ENABLED (before 11.4)
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $INCREMENTAL_ROLLOUT_MODE == "manual"
      - $INCREMENTAL_ROLLOUT_ENABLED
  except:
    variables:
      - $INCREMENTAL_ROLLOUT_MODE == "timed"

.timed_rollout_template: &timed_rollout_template
  <<: *rollout_template
  when: delayed
  start_in: 5 minutes
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $INCREMENTAL_ROLLOUT_MODE == "timed"

timed rollout 10%:
  <<: *timed_rollout_template
  stage: incremental rollout 10%
  variables:
    ROLLOUT_PERCENTAGE: 10

timed rollout 25%:
  <<: *timed_rollout_template
  stage: incremental rollout 25%
  variables:
    ROLLOUT_PERCENTAGE: 25

timed rollout 50%:
  <<: *timed_rollout_template
  stage: incremental rollout 50%
  variables:
    ROLLOUT_PERCENTAGE: 50

timed rollout 100%:
  <<: *timed_rollout_template
  <<: *production_template
  stage: incremental rollout 100%
  variables:
    ROLLOUT_PERCENTAGE: 100

rollout 10%:
  <<: *manual_rollout_template
  variables:
    ROLLOUT_PERCENTAGE: 10

rollout 25%:
  <<: *manual_rollout_template
  variables:
    ROLLOUT_PERCENTAGE: 25

rollout 50%:
  <<: *manual_rollout_template
  variables:
    ROLLOUT_PERCENTAGE: 50

rollout 100%:
  <<: *manual_rollout_template
  <<: *production_template
  allow_failure: false

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |  # | 表示下面都为其下面的内容，一般yaml用法
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
    export CONTAINER_TAG="stable"
  fi

  function registry_login() {
    # 使用Harbor，直接跳过此功能
    return 0
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi
  }

  function get_replicas() {
    local track="${1:-stable}"
    local percentage="${2:-100}"

    env_track=$( echo $track | tr -s  '[:lower:]'  '[:upper:]' )
    env_slug=$( echo ${CI_ENVIRONMENT_SLUG//-/_} | tr -s  '[:lower:]'  '[:upper:]' )

    if [[ "$track" == "stable" ]] || [[ "$track" == "rollout" ]]; then
      # for stable track get number of replicas from `PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        new_replicas=$REPLICAS
      fi
    else
      # for all tracks get number of replicas from `CANARY_PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_track}_${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        eval new_replicas=\${env_track}_REPLICAS
      fi
    fi

    replicas="${new_replicas:-1}"
    replicas="$(($replicas * $percentage / 100))"

    # always return at least one replicas
    if [[ $replicas -gt 0 ]]; then
      echo "$replicas"
    else
      echo 1
    fi
  }

  function deploy() {
    local KUBE_NAMESPACE="${1-${DEV_NAMESPACE}}"
    local track="${2-stable}"
    local percentage="${3:-100}"
    local name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${CHART_NAME}"
    local replicas="1"

    # if track is different than stable,
    # re-use all attached resources
    if [[ "$track" != "stable" ]]; then
      name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${track}-${CHART_NAME}"
    fi

    # helm名只允许小写和-
    name=$(echo ${name//_/-} | tr -s '[:upper:]' '[:lower:]')

    replicas=$(get_replicas "$track" "$percentage")

    if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
      secret_name='gitlab-registry'
    else
      secret_name=''
    fi
    
    if [[ -z "$(helm ls -q "^$name$")" ]]; then
      helm upgrade --install \
        --wait \
        --namespace="$KUBE_NAMESPACE" \
        --set image.repository="${CONTAINER_IMAGE}" \
        --set image.tag="${CONTAINER_TAG}" \
        --set replicaCount="$replicas" \
        "$name" \
        chart/
    else
      helm upgrade --reuse-values --install \
        --wait \
        --namespace="$KUBE_NAMESPACE" \
        --set image.repository="${CONTAINER_IMAGE}" \
        --set image.tag="${CONTAINER_TAG}" \
        --set replicaCount="$replicas" \
        "$name" \
        chart/
    fi

    kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/${name}"
  }

  function scale() {
    local KUBE_NAMESPACE="${1-${DEV_NAMESPACE}}"
    local track="${2-stable}"
    local percentage="${3:-100}"
    local name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${CHART_NAME}"

    if [[ "$track" != "stable" ]]; then
      name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${track}-${CHART_NAME}"
    fi

    # helm名只允许小写和-
    name=$(echo ${name//_/-} | tr -s '[:upper:]' '[:lower:]')    

    replicas=$(get_replicas "$track" "$percentage")

    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      helm upgrade --reuse-values \
        --wait \
        --set replicaCount="$replicas" \
        --namespace="$KUBE_NAMESPACE" \
        "$name" \
        chart/
    fi
  }

  function install_dependencies() {
    # 基础镜像已经安装，此处只打印版本
    helm version --client
    tiller -version
    kubectl version --client
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function download_chart() {
    if [[ ! -d chart ]]; then
      auto_chart=${AUTO_DEVOPS_CHART:-${HELM_REPO_NAME}/${CHART_NAME}}
      auto_chart_name=$(basename $auto_chart)
      auto_chart_name=${auto_chart_name%.tgz}
      auto_chart_name=${auto_chart_name%.tar.gz}
    else
      auto_chart="chart"
      auto_chart_name="chart"
    fi

    # 添加内网chart
    helm init --client-only --stable-repo-url ${HELM_REPO}
    helm repo add ${HELM_REPO_NAME} ${HELM_REPO}
    if [[ ! -d "$auto_chart" ]]; then
      helm fetch ${auto_chart} --untar
    fi
    if [ "$auto_chart_name" != "chart" ]; then
      mv ${auto_chart_name} chart
    fi

    helm dependency update chart/
    helm dependency build chart/
  }

  function ensure_namespace() {
    local KUBE_NAMESPACE="$1"
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function check_kube_domain() {
    if [ -z ${AUTO_DEVOPS_DOMAIN+x} ]; then
      echo "In order to deploy or use Review Apps, AUTO_DEVOPS_DOMAIN variable must be set"
      echo "You can do it in Auto DevOps project settings or defining a variable at group or project level"
      echo "You can also manually add it in .gitlab-ci.yml"
      false
    else
      true
    fi
  }

  function build() {
    # registry_login
    # 设置maven setting.xml
    cat > /usr/share/maven/conf/settings.xml <<EOF
  <?xml version="1.0" encoding="UTF-8"?>    
  <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
      https://maven.apache.org/xsd/settings-1.0.0.xsd">
    <localRepository>/usr/share/maven/ref/repository</localRepository>
    <servers>
      <server>
        <id>dockerId</id>
        <username>${DOCKER_USER}</username>
        <password>${DOCKER_PASSWD}</password>
        <configuration>
          <email></email>
        </configuration>
      </server>
    </servers>
  </settings>
  EOF

    # 设置pom.xml
    cat > ${CI_PROJECT_DIR}/pom.xml <<EOF
  <?xml version="1.0" encoding="UTF-8"?>
  <project xmlns="http://maven.apache.org/POM/4.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>

      <groupId>${GROUP_ID}</groupId>
      <artifactId>${ARTIFACTID}</artifactId>
      <version>${PROJECT_VERSION}</version>

      <properties>
          <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
          <java.version>1.8</java.version>
          <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>
      </properties>
      <parent>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-parent</artifactId>
          <version>1.5.13.RELEASE</version>
      </parent>
      <dependencies>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-undertow</artifactId>
          </dependency>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>
              <exclusions>
                  <exclusion>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-starter-tomcat</artifactId>
                  </exclusion>
              </exclusions>
          </dependency>
          <dependency>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>1.16.20</version>
          </dependency>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-devtools</artifactId>
          </dependency>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-test</artifactId>
              <scope>test</scope>
          </dependency>
      </dependencies>

      <dependencyManagement>
          <dependencies>
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-dependencies</artifactId>
                  <version>Dalston.SR5</version>
                  <type>pom</type>
                  <scope>import</scope>
              </dependency>
          </dependencies>
      </dependencyManagement>

      <build>
          <plugins>
              <plugin>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-maven-plugin</artifactId>
                  <configuration>
                      <fork>true</fork>  <!-- 如果没有该项配置，devtools不会起作用，即应用不会restart -->
                  </configuration>
              </plugin>
               <plugin>
                  <groupId>com.spotify</groupId>
                  <artifactId>docker-maven-plugin</artifactId>
                  <version>1.2.0</version>
                  <configuration>
                      <dockerHost>${DOCKER_HOST}</dockerHost>
                      <serverId>dockerId</serverId>
                      <registryUrl>${CONTAINER_REPO}</registryUrl>
                      <imageName>${CONTAINER_IMAGE}:${CONTAINER_TAG}</imageName>
                      <baseImage>${CONTAINER_REPO}/library/openjdk:8-jdk-alpine</baseImage>
                      <entryPoint>["java", "-Xdebug", "-Xnoagent", "-Duser.timezone=GMT+08", "-Djava.compiler=NONE", "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n","-Djava.security.egd=file:/dev/urandom", "-jar", "/\${project.build.finalName}.jar"]</entryPoint>
                      <resources>
                          <resource>
                              <targetPath>/</targetPath>
                              <directory>\${project.build.directory}</directory>
                              <include>\${project.build.finalName}.jar</include>
                          </resource>
                      </resources>
                  </configuration>
                  <executions>
                      <execution>
                          <phase>install</phase>
                          <goals>
                              <goal>build</goal>
                          </goals>
                      </execution>
                      <execution>
                          <id>tag-image</id>
                          <phase>install</phase>
                          <goals>
                              <goal>tag</goal>
                          </goals>
                          <configuration>
                              <image>${CONTAINER_IMAGE}:${CONTAINER_TAG}</image>
                              <newName>
                                  ${CONTAINER_IMAGE}:latest
                              </newName>
                          </configuration>
                      </execution>
                      <execution>
                          <id>push-image</id>
                          <phase>install</phase>
                          <goals>
                              <goal>push</goal>
                          </goals>
                          <configuration>
                              <imageName>
                              ${CONTAINER_IMAGE}:${CONTAINER_TAG}
                              </imageName>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>
          </plugins>
      </build>

      <repositories>
          <repository>
              <id>nexus</id>
              <name>Nexus Repository</name>
              <url>${MAVEN_HOST}/repository/maven-public/</url>
              <releases>
                  <enabled>true</enabled>
              </releases>
              <!--snapshots默认是关闭的,需要开启  -->
              <snapshots>
                  <enabled>false</enabled>
              </snapshots>
          </repository>
      </repositories>

      <pluginRepositories>
          <pluginRepository>
              <id>central</id>
              <name>CentralRepository</name>
              <url>${MAVEN_HOST}/repository/maven-public/</url>
              <layout>default</layout>
              <snapshots>
                  <enabled>false</enabled>
              </snapshots>
              <releases>
                  <updatePolicy>never</updatePolicy>
              </releases>
          </pluginRepository>
      </pluginRepositories>
  </project> 
  EOF

      echo "mvn test"
      mvn test
      # echo "mvn sonar"
      # mvn sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN}
      echo "mvn install -DskipTests"
      mvn install -DskipTests
  }

  function initialize_tiller() {
    echo "Checking Tiller..."
    if [ -z "${HELM_HOST}" ]; then
      export HELM_HOST=":44134"
      tiller -listen ${HELM_HOST} -alsologtostderr > /dev/null 2>&1 &
      echo "Tiller is listening on ${HELM_HOST}"
    fi

    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi
    echo ""
  }

  function create_secret() {
    local KUBE_NAMESPACE="$1"
    echo "Create secret..."
    if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
      return
    fi

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CONTAINER_REPO" \
      --docker-username="${DOCKER_USER}" \
      --docker-password="${DOCKER_PASSWD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function zaproxy() {
    export CI_ENVIRONMENT_URL=$(cat environment_url.txt)
    mkdir -p /zap/wrk/
    zap-baseline.py -t "$CI_ENVIRONMENT_URL" -g gen.conf -r report.html || true
    cp /zap/wrk/report.html .
  }


  function persist_environment_url() {
      echo $CI_ENVIRONMENT_URL > environment_url.txt
  }

  function delete() {
    local KUBE_NAMESPACE="${1-${DEV_NAMESPACE}}"
    local track="${2-stable}"
    local name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${CHART_NAME}"

    if [[ "$track" != "stable" ]]; then
      name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${track}-${CHART_NAME}"
    fi
    
    # helm名只允许小写和-
    name=$(echo ${name//_/-} | tr -s '[:upper:]' '[:lower:]')    

    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      helm delete --purge "$name"
    fi
  }

before_script:  # 定义在每个job之前运行的命令
  - *auto_devops  # * 包括命名的anchor（auto_devops）
